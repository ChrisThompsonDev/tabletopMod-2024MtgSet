{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "8dad82",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 25.75,
        "posY": 2.201791,
        "posZ": -19.25,
        "rotX": 2.30628387E-08,
        "rotY": 90.0000458,
        "rotZ": -2.399227E-06,
        "scaleX": 3.09999824,
        "scaleY": 3.09999824,
        "scaleZ": 3.09999824
      },
      "Nickname": "Duskmourn: House of Horror Booster Box (Mystery Booster Generator) (DSK)",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://www.dropbox.com/s/jockzmj1e6yx0ub/tuckbox.obj?dl=1",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666213749/327EF64F9F6599C7338FBEFD6E30F67F94687F9A/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "function onLoad()\r\n  --customize card-back image\r\n  backURL='https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/'\r\n\r\n  setCode='DSK'\r\n  -- setCode='KLM'\r\n  -- setCode='STX'\r\n  -- setCode='ZNR'\r\n\r\n  cardStackName=setCode..\" Booster\"\r\n  cardStackDescription=\"\"\r\n\r\n  -------------- don't change these\r\n  nBooster=0\r\n  boosterDats={}\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n---- Booster Set Lookup Function\r\n---- should be correct for all sets?\r\n---- if not add special cases e.g. using the set:lower()=='mystery' example\r\n--------------------------------------------------------------------------------\r\nlocal apiSet='http://api.scryfall.com/cards/random?q=is:booster+s:'\r\nfunction rarity(m,r,u)\r\n  if math.random(1,m or 36)==1 then return'r:mythic'\r\n  elseif math.random(1,r or 8)==1 then return'r:rare'\r\n  elseif math.random(1,u or 4)==1 then return'r:uncommon'\r\n  else return'r:common'end end\r\nfunction typeCo(p,t)local n=math.random(#p-1,#p)for i=13,#p do if n==i then p[i]=p[i]..'+'..t else p[i]=p[i]..'+-('..t..')'end end return p end\r\n\r\nlocal Booster=setmetatable({\r\n  dom=function(p)return typeCo(p,'t:legendary')end,\r\n  war=function(p)return typeCo(p,'t:planeswalker')end,\r\n  znr=function(p)return typeCo(p,'t:land+(is:spell+or+pathway)')end,\r\n  tsp='tsb',mb1='fmb1',mh2='h1r',bfz='exp',ogw='exp',kld='mps',aer='mps',akh='mp2',hou='mp2',stx='sta'\r\n},{__call=function(t,set,n)\r\n  local pack,u={},apiSet..set..'+'\r\n  u=u:gsub('%+s:%(','+(')\r\n  if not n and t[set]and type(t[set])=='function'then\r\n    return t[set](t(set,true))\r\n  else\r\n    for c in('wubrg'):gmatch('.')do table.insert(pack,u..'r:common+c>='..c)end\r\n    for i=1,6 do table.insert(pack,u..'r:common+-t:basic')end\r\n    --masterpiece math\r\n    if not n and((t[set]and math.random(1,144)==1)or('tsp mb1 mh2'):find(set))then\r\n      pack[#pack]=apiSet..t[set]end\r\n    for i=1,3 do table.insert(pack,u..'r:uncommon')end\r\n    table.insert(pack,u..rarity(8,1))\r\n    return pack\r\n  end\r\nend})\r\n\r\n--ReplacementSlot\r\nfunction rSlot(p,s,a,b)for i,v in pairs(p)do if i~=6 then p[i]=v..a else p[i]=apiSet..s..'+'..rarity()..b end end return p end\r\n\r\n--Weird Boosters\r\nBooster['mystery']=function()\r\n  urlTable={}\r\n  -- MYSTERY BOOSTER (set mb1)\r\n  urlPrefix='http://api.scryfall.com/cards/random?q=set:mb1+'\r\n  -- slot 1-10: each Convention pack has 2 commons/uncommons of each color\r\n  for _,c in pairs({'w','u','b','r','g'}) do\r\n    table.insert(urlTable,urlPrefix..'r<rare+c='..c)\r\n    table.insert(urlTable,urlPrefix..'r<rare+c='..c)\r\n  end\r\n  -- slot 11: 1 multicolored common/uncommon\r\n  table.insert(urlTable,urlPrefix..'c:m+r<rare')\r\n  -- slot 12: 1 common/uncommon artifact/land\r\n  table.insert(urlTable,urlPrefix..'c:c+r<rare')\r\n  -- slot 13: 1 rare/mythic rare with the M15 card frame\r\n  table.insert(urlTable,urlPrefix..'r>=rare+frame:2015')\r\n  -- slot 14: one pre-M15 card in its original frame\r\n  table.insert(urlTable,urlPrefix..'r>=rare+-frame:2015')\r\n  -- slot 15: a pretend \"playtest card\" in the special slot that seems more like part of an Un-set\r\n  table.insert(urlTable,'http://api.scryfall.com/cards/random?q=set:cmb1')\r\n  return urlTable\r\nend\r\n\r\nBooster['stx']=function()\r\n  local pack,u={},apiSet..'stx+'\r\n  -- 1 mystical archive card  (Uncommon, Rare, or Mythic Rare, 50% chance japanese)\r\n  if math.random(2)==1 then table.insert(pack,'http://api.scryfall.com/cards/random?q=set:sta+r>common+lang:en')\r\n  else table.insert(pack,'http://api.scryfall.com/cards/random?q=set:sta+r>common+lang:ja') end\r\n  table.insert(pack,u..'t:lesson+-r:u')             -- 1 lesson card (Common, Rare, or Mythic Rare)\r\n  table.insert(pack,u..rarity(8,1))                 -- 1 rare (7/8 chance) or mythic rare (1/8 chance)\r\n  for i=1,3 do table.insert(pack,u..'r:u') end      -- 3 uncommons\r\n  for _,c in pairs({'w','u','b','r','g'}) do table.insert(pack,u..'r:c+c:'..c) end              -- 8 commons\r\n  for i=1,3 do table.insert(pack,u..'r:c+-t:basic') end\r\n  if math.random(3)==1 then table.insert(pack,u) else table.insert(pack,u..'r:c+-t:basic') end  -- 33% chance foil of any rarity (66% chance another common)\r\n  return pack\r\nend\r\n\r\nBooster['2xm']=function(p)p[11]=p[#p]for i=9,10 do p[i]=apiSet..'2xm'..'+'..rarity()end return p end\r\nfor s in('isd dka soi emn'):gmatch('%S+')do\r\n  Booster[s]=function(p)return rSlot(p,s,'+-is:transform','+is:transform')end end\r\nfor s in('mid'):gmatch('%S+')do--Crimson Moon\r\n  Booster[s]=function(p)local n=math.random(#p-1,#p)for i,v in pairs(p)do if i==6 or i==n then p[i]=p[i]..'+is:transform'else p[i]=p[i]..'+-is:transform'end end return p end end\r\nfor s in('cns cn2'):gmatch('%S+')do\r\n  Booster[s]=function(p)return rSlot(p,s,'+-wm:conspiracy','+wm:conspiracy')end end\r\nfor s in('rav gpt dis rtr gtc dgm grn rna'):gmatch('%S+')do\r\n  Booster[s]=function(p)return rSlot(p,s,'+-t:land','+t:land+-t:basic')end end\r\nfor s in('ice all csp mh1 khm'):gmatch('%S+')do\r\n  Booster[s]=function(p)p[6]=apiSet..s..'+t:basic+t:snow'return p end end\r\n\r\n--Custom Booster Packs\r\nBooster.standard=function(qTbl)\r\n  local pack,u={},'http://api.scryfall.com/cards/random?q=f:standard+'\r\n  for c in ('wubrg'):gmatch('.')do\r\n    table.insert(pack,u..'r:common+c:'..c)end\r\n  for i=1,5 do table.insert(pack,u..'r:common+-t:basic')end\r\n  for i=1,3 do table.insert(pack,u..'r:uncommon')end\r\n  table.insert(pack,u..rarity(8,1))\r\n  table.insert(pack,u..'t:basic')\r\n  table.insert(pack,u:sub(1,39)..'(set:tafr+or+set:tstx+or+set:tkhm+or+set:tznr+or+set:sznr+or+set:tm21+or+set:tiko+or+set:tthb+or+set:teld)')\r\n  for i=#pack-1,#pack do\r\n    if math.random(1,2)==1 then\r\n      pack[i]=u..'(border:borderless+or+frame:showcase+or+frame:extendedart+or+set:plist+or+set:sta)'\r\n    end end\r\n  return pack end\r\nBooster.conspiracy=function(qTbl)--wubrgCCCCCTUUURT\r\n  local p=Booster('(s:cns+or+s:cn2)')\r\n  local z=p[#p]:gsub('r:%S+',rarity(9,6,3))\r\n  table.insert(p,z)\r\n  p[6]=p[math.random(11,12)]\r\n  for i,s in pairs(p)do\r\n    if i==6 or i==#p then\r\n      p[i]=p[i]..'+wm:conspiracy'\r\n    else p[i]=p[i]..'+-wm:conspiracy'end end\r\n  return p end\r\nBooster.innistrad=function(qTbl)--wubrgDCCCCUUUDRD\r\n  local p=Booster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)')\r\n  local z=p[#p]:gsub('r:%S+',rarity(8,1))\r\n  table.insert(p,z)\r\n  p[11]=p[12]\r\n  for i,s in pairs(p)do\r\n    if i==6 or i==#p or i==#p-2 then\r\n      p[i]=p[i]..'+is:transform'\r\n    else p[i]=p[i]..'+-is:transform'end end\r\n  return p end\r\nBooster.ravnica=function(qTbl)--wubrgLmmmCCUUURL\r\n  local l,p='t:land+-t:basic',Booster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)')\r\n  table.insert(p,p[#p])\r\n  for i=7,9 do p[i]=p[6]..'+id>=2'end\r\n  for i,s in pairs(p)do\r\n    if i==6 or i==#p then\r\n      p[i]=p[i]:gsub('r:%S+',rarity(9,6,3))..'+'..l\r\n    else p[i]=p[i]..'+-'..l end end\r\n  return p end\r\n\r\nfunction getScryfallQueryTable()\r\n  urlTable=Booster(setCode:lower())\r\n  return urlTable\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\n-- when a booster is taken out from the box, start scryfall query and replace booster contents\r\nfunction onObjectLeaveContainer(container, leave_object)\r\n  if container ~= self then return end\r\n\r\n  leave_object.setName(cardStackName)\r\n\r\n  nBooster=nBooster+1\r\n  local boosterN=nBooster\r\n\r\n  urlTable=getScryfallQueryTable()\r\n  getDeckDat(urlTable,boosterN)\r\n\r\n  leave_object.createButton({\r\n    click_function='null',\r\n    function_owner=self,\r\n    label='generating\\ncards',\r\n    position={0,0.5,0},\r\n    rotation={0,90,0},\r\n    scale={0.5,0.5,0.5},\r\n    width=0,\r\n    height=0,\r\n    font_size=1000,\r\n    color={0,0,0,0},\r\n    font_color={1,1,1,100},\r\n  })\r\n\r\n  Wait.condition(function()\r\n    leave_object.clearButtons()\r\n    Wait.condition(function()\r\n      bDat = leave_object.getData()\r\n      bDat.ContainedObjects={boosterDats[boosterN]}\r\n      leave_object.destruct()\r\n      spawnObjectData({data=bDat})\r\n    end,\r\n    function()\r\n      -- print('obj resting')\r\n      return leave_object.resting\r\n    end)\r\n  end,function()\r\n    -- print('nil data')\r\n    return boosterDats[boosterN]~=nil\r\n  end)\r\nend\r\n\r\n\r\n-- takes in a table of scryfall query url's\r\n-- queries scryfall for the data\r\n-- generates TTS deckData object with the cards (saved to boosterDats[boosterN])\r\nfunction getDeckDat(urlTable,boosterN)\r\n\r\n  deckDat={\r\n    Transform={posX=0,posY=0,posZ=0,rotX=0,rotY=180,rotZ=180,scaleX=1,scaleY=1,scaleZ=1},\r\n    Name=\"Deck\",\r\n    Nickname=cardStackName,\r\n    Description=cardStackDescription,\r\n    DeckIDs={},\r\n    CustomDeck={},\r\n    ContainedObjects={},\r\n  }\r\n\r\n  local nLoading=0\r\n  local nLoaded=0\r\n\r\n  for n,url in ipairs(urlTable) do\r\n    nLoading=nLoading+1\r\n\r\n    WebRequest.get(url,function(wr)\r\n      cardDat=getCardDatFromJSON(wr.text,n)\r\n      deckDat.ContainedObjects[n]=cardDat\r\n      deckDat.DeckIDs[n]=cardDat.CardID      -- add card info into deckDat\r\n      deckDat.CustomDeck[n]=cardDat.CustomDeck[n]\r\n      nLoaded=nLoaded+1\r\n    end)\r\n\r\n  end\r\n\r\n  Wait.condition(function()   -- once all the queries come back from scryfall\r\n\r\n    -- check for doubles\r\n    local doubles=false\r\n    local names={}\r\n    for _,card in pairs(deckDat.ContainedObjects) do\r\n      for _,prevName in pairs(names) do\r\n        if card.Nickname==prevName then\r\n          doubles=true\r\n        end\r\n      end\r\n      table.insert(names,card.Nickname)\r\n    end\r\n\r\n    if doubles then   -- just redo the search\r\n      getDeckDat(urlTable,boosterN)\r\n    else              -- update the boosterDats\r\n      boosterDats[boosterN]=deckDat\r\n    end\r\n  end,\r\n  function() return nLoading==nLoaded end)\r\n\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\n\r\nfunction getCardDatFromJSON(json,n)\r\n\r\n  local c=JSONdecode(json)\r\n\r\n  c.face=''\r\n  c.oracle=''\r\n  local qual='large'\r\n\r\n  local imagesuffix=''\r\n  if c.image_status~='highres_scan' then      -- cache buster for low quality images\r\n    imagesuffix='?'..tostring(os.date(\"%x\")):gsub('/', '')\r\n  end\r\n\r\n  --Check for card's spoiler image quality\r\n  --Oracle text Handling for Split then DFC then Normal\r\n  if c.card_faces and c.image_uris then\r\n    for i,f in ipairs(c.card_faces) do\r\n      if c.cmc then\r\n        f.name=f.name:gsub('\"','')..'\\n'..f.type_line..' '..c.cmc..'CMC'\r\n      else\r\n        f.name=f.name:gsub('\"','')..'\\n'..f.type_line..' '..f.cmc..'CMC'\r\n      end\r\n      if i==1 then cardName=f.name end\r\n      c.oracle=c.oracle..f.name..'\\n'..setOracle(f)..(i==#c.card_faces and''or'\\n')\r\n    end\r\n  elseif c.card_faces then\r\n    local f=c.card_faces[1]\r\n    if c.cmc then\r\n      cardName=f.name:gsub('\"','')..'\\n'..f.type_line..' '..c.cmc..'CMC DFC'\r\n    else\r\n      cardName=f.name:gsub('\"','')..'\\n'..f.type_line..' '..f.cmc..'CMC DFC'\r\n    end\r\n    c.oracle=setOracle(f)\r\n  else\r\n    cardName=c.name:gsub('\"','')..'\\n'..c.type_line..' '..c.cmc..'CMC'\r\n    c.oracle=setOracle(c)\r\n  end\r\n  local backDat=nil\r\n  --Image Handling\r\n  if c.card_faces and not c.image_uris then --DFC REWORKED for STATES!\r\n    local faceAddress=c.card_faces[1].image_uris.normal:gsub('%?.*',''):gsub('normal',qual)..imagesuffix\r\n    local backAddress=c.card_faces[2].image_uris.normal:gsub('%?.*',''):gsub('normal',qual)..imagesuffix\r\n    if faceAddress:find('/back/') and backAddress:find('/front/') then\r\n      local temp=faceAddress;faceAddress=backAddress;backAddress=temp\r\n    end\r\n    c.face=faceAddress\r\n    local f=c.card_faces[2]\r\n    local name\r\n    if c.cmc then\r\n      name=f.name:gsub('\"','')..'\\n'..f.type_line..' '..c.cmc..'CMC DFC'\r\n    else\r\n      name=f.name:gsub('\"','')..'\\n'..f.type_line..' '..f.cmc..'CMC DFC'\r\n    end\r\n    local oracle=setOracle(f)\r\n    local b=n+100\r\n    backDat={\r\n      Transform={posX=0,posY=0,posZ=0,rotX=0,rotY=0,rotZ=0,scaleX=1,scaleY=1,scaleZ=1},\r\n      Name=\"Card\",\r\n      Nickname=name,\r\n      Description=oracle,\r\n      Memo=c.oracle_id,\r\n      CardID=b*100,\r\n      CustomDeck={[b]={FaceURL=backAddress,BackURL=backURL,NumWidth=1,NumHeight=1,Type=0,BackIsHidden=true,UniqueBack=false}},\r\n    }\r\n  elseif c.image_uris then\r\n    c.face=c.image_uris.normal:gsub('%?.*',''):gsub('normal',qual)..imagesuffix\r\n    if cardName:lower():match('geralf') then\r\n      c.face=c.image_uris.normal:gsub('%?.*',''):gsub('normal','png'):gsub('jpg','png')..imagesuffix\r\n    end\r\n  end\r\n\r\n  local cardDat={\r\n    Transform={posX=0,posY=0,posZ=0,rotX=0,rotY=0,rotZ=0,scaleX=1,scaleY=1,scaleZ=1},\r\n    Name=\"Card\",\r\n    Nickname=cardName,\r\n    Description=c.oracle,\r\n    Memo=c.oracle_id,\r\n    CardID=n*100,\r\n    CustomDeck={[n]={FaceURL=c.face,BackURL=backURL,NumWidth=1,NumHeight=1,Type=0,BackIsHidden=true,UniqueBack=false}},\r\n  }\r\n\r\n  if backDat then\r\n    cardDat.States={[2]=backDat}\r\n  end\r\n  return cardDat\r\nend\r\n\r\n\r\nfunction setOracle(c)local n='\\n[b]'\r\n  if c.power then\r\n    n=n..c.power..'/'..c.toughness\r\n  elseif c.loyalty then\r\n    n=n..tostring(c.loyalty)\r\n  else\r\n    n=false\r\n  end\r\n  return c.oracle_text..(n and n..'[/b]'or'')\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n-- pie's manual \"JSONdecode\" for scryfall's \"object\":\"card\"\r\n--------------------------------------------------------------------------------\r\n\r\nnormal_card_keys={\r\n  'object',\r\n  'id',\r\n  'oracle_id',\r\n  'name',\r\n  'lang',\r\n  'layout',\r\n  'image_status',\r\n  'image_uris',\r\n  'mana_cost',\r\n  'cmc',\r\n  'type_line',\r\n  'oracle_text',\r\n  'loyalty',\r\n  'power',\r\n  'toughness',\r\n  'loyalty',\r\n  'legalities',\r\n  'set',\r\n  'rulings_uri',\r\n  'prints_search_uri',\r\n  'collector_number'\r\n}\r\n\r\nimage_uris_keys={    -- \"image_uris\":{\r\n  'small',\r\n  'normal',\r\n  'large',\r\n  'png',\r\n  'art_crop',\r\n  'border_crop',\r\n}\r\n\r\nlegalities_keys={    -- \"legalities\":{\r\n  'standard',\r\n  'future',\r\n  'historic',\r\n  'gladiator',\r\n  'pioneer',\r\n  'modern',\r\n  'legacy',\r\n  'pauper',\r\n  'vintage',\r\n  'penny',\r\n  'commander',\r\n  'brawl',\r\n  'duel',\r\n  'oldschool',\r\n  'premodern',\r\n}\r\n\r\nrelated_card_keys={     -- \"all_parts\":[{\"object\":\"related_card\",\r\n  'id',\r\n  'component',\r\n  'name',\r\n  'type_line',\r\n  'uri',\r\n}\r\n\r\ncard_face_keys={        -- \"card_faces\":[{\"object\":\"card_face\",\r\n  'name',\r\n  'mana_cost',\r\n  'cmc',\r\n  'type_line',\r\n  'oracle_text',\r\n  'power',\r\n  'toughness',\r\n  'loyalty',\r\n  'image_uris',\r\n}\r\n\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\nfunction JSONdecode(txt)\r\n  local txtBeginning = txt:sub(1,16)\r\n  local jsonType = txtBeginning:match('{\"object\":\"(%w+)\"')\r\n\r\n  -- not scryfall? use normal JSON.decode\r\n  if not(jsonType=='card' or jsonType=='list') then\r\n    return JSON.decode(txt)\r\n  end\r\n\r\n  ------------------------------------------------------------------------------\r\n  -- parse list: extract each card, and parse it separately\r\n  -- used when one wants to decode a whole list\r\n  if jsonType=='list' then\r\n    local txtBeginning = txt:sub(1,80)\r\n    local nCards=txtBeginning:match('\"total_cards\":(%d+)')\r\n    if nCards==nil then\r\n      return JSON.decode(txt)\r\n    end\r\n    local cardStart=0\r\n    local cardEnd=0\r\n    local cardDats = {}\r\n    for i=1,nCards do     -- could insert max number cards to parse here\r\n      cardStart=string.find(txt,'{\"object\":\"card\"',cardEnd+1)\r\n      cardEnd = findClosingBracket(txt,cardStart)\r\n      local cardDat = JSONdecode(txt:sub(cardStart,cardEnd))\r\n      table.insert(cardDats,cardDat)\r\n    end\r\n    local dat = {object=\"list\",total_cards=nCards,data=cardDats}    --ignoring has_more...\r\n    return dat\r\n  end\r\n\r\n  ------------------------------------------------------------------------------\r\n  -- parse card\r\n\r\n  txt=txt:gsub('}',',}')    -- comma helps parsing last element in an array\r\n\r\n  local cardDat={}\r\n  local all_parts_i=string.find(txt,'\"all_parts\":')\r\n  local card_faces_i=string.find(txt,'\"card_faces\":')\r\n\r\n  -- if all_parts exist\r\n  if all_parts_i~=nil then\r\n    local st=string.find(txt,'%[',all_parts_i)\r\n    local en=findClosingBracket(txt,st)\r\n    local all_parts_txt = txt:sub(all_parts_i,en)\r\n    local all_parts={}\r\n    -- remove all_parts snip from the main text\r\n    txt=txt:sub(1,all_parts_i-1)..txt:sub(en+2,-1)\r\n    -- parse all_parts_txt for each related_card\r\n    st=1\r\n    local cardN=0\r\n    while st~=nil do\r\n      st=string.find(all_parts_txt,'{\"object\":\"related_card\"',st)\r\n      if st~=nil then\r\n        cardN=cardN+1\r\n        en=findClosingBracket(all_parts_txt,st)\r\n        local related_card_txt=all_parts_txt:sub(st,en)\r\n        st=en\r\n        local s,e=1,1\r\n        local related_card={}\r\n        for i,key in ipairs(related_card_keys) do\r\n          val,s=getKeyValue(related_card_txt,key,s)\r\n          related_card[key]=val\r\n        end\r\n        table.insert(all_parts,related_card)\r\n        if cardN>100 then break end   -- avoid inf loop if something goes strange\r\n      end\r\n      cardDat.all_parts=all_parts\r\n    end\r\n  end\r\n\r\n  -- if card_faces exist\r\n  if card_faces_i~=nil then\r\n    local st=string.find(txt,'%[',card_faces_i)\r\n    local en=findClosingBracket(txt,st)\r\n    local card_faces_txt = txt:sub(card_faces_i,en)\r\n    local card_faces={}\r\n    -- remove card_faces snip from the main text\r\n    txt=txt:sub(1,card_faces_i-1)..txt:sub(en+2,-1)\r\n\r\n    -- parse card_faces_txt for each card_face\r\n    st=1\r\n    local cardN=0\r\n    while st~=nil do\r\n      st=string.find(card_faces_txt,'{\"object\":\"card_face\"',st)\r\n      if st~=nil then\r\n        cardN=cardN+1\r\n        en=findClosingBracket(card_faces_txt,st)\r\n        local card_face_txt=card_faces_txt:sub(st,en)\r\n        st=en\r\n        local s,e=1,1\r\n        local card_face={}\r\n        for i,key in ipairs(card_face_keys) do\r\n          val,s=getKeyValue(card_face_txt,key,s)\r\n          card_face[key]=val\r\n        end\r\n        table.insert(card_faces,card_face)\r\n        if cardN>4 then break end   -- avoid inf loop if something goes strange\r\n      end\r\n      cardDat.card_faces=card_faces\r\n    end\r\n  end\r\n\r\n  -- normal card (or what's left of it after removing card_faces and all_parts)\r\n  st=1\r\n  for i,key in ipairs(normal_card_keys) do\r\n    val,st=getKeyValue(txt,key,st)\r\n    cardDat[key]=val\r\n  end\r\n\r\n  return cardDat\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n-- returns data for one card at a time from a scryfall's \"object\":\"list\"\r\nfunction getNextCardDatFromList(txt,startHere)\r\n\r\n  if startHere==nil then\r\n    startHere=1\r\n  end\r\n\r\n  local cardStart=string.find(txt,'{\"object\":\"card\"',startHere)\r\n  if cardStart==nil then\r\n    -- print('error: no more cards in list')\r\n    startHere=nil\r\n    return nil,nil,nil\r\n  end\r\n\r\n  local cardEnd = findClosingBracket(txt,cardStart)\r\n  if cardEnd==nil then\r\n    -- print('error: no more cards in list')\r\n    startHere=nil\r\n    return nil,nil,nil\r\n  end\r\n\r\n  -- startHere is not a local variable, so it's possible to just do:\r\n  -- getNextCardFromList(txt) and it will keep giving the next card or nil if there's no more\r\n  startHere=cardEnd+1\r\n\r\n  local cardDat = JSONdecode(txt:sub(cardStart,cardEnd))\r\n\r\n  return cardDat,cardStart,cardEnd\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\nfunction findClosingBracket(txt,st)   -- find paired {} or []\r\n  if st==nil then return nil end\r\n  local ob,cb='{','}'\r\n  local pattern='[{}]'\r\n  if txt:sub(st,st)=='[' then\r\n    ob,cb='[',']'\r\n    pattern='[%[%]]'\r\n  end\r\n  local txti=st\r\n  local nopen=1\r\n  while nopen>0 do\r\n    txti=string.find(txt,pattern,txti+1)\r\n    if txt:sub(txti,txti)==ob then\r\n      nopen=nopen+1\r\n    elseif txt:sub(txti,txti)==cb then\r\n      nopen=nopen-1\r\n    end\r\n  end\r\n  return txti\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\nfunction getKeyValue(txt,key,st)\r\n  local str='\"'..key..'\":'\r\n  local st=string.find(txt,str,st)\r\n  local en=nil\r\n  local value=nil\r\n  if st~=nil then\r\n    if key=='image_uris' then     -- special case for scryfall's image_uris table\r\n      value={}\r\n      local s=st\r\n      for i,k in ipairs(image_uris_keys) do\r\n        local val,s=getKeyValue(txt,k,s)\r\n        value[k]=val\r\n      end\r\n      en=s\r\n    elseif txt:sub(st+#str,st+#str)~='\"' then      -- not a string\r\n      en=string.find(txt,',\"',st+#str+1)\r\n      value=tonumber(txt:sub(st+#str,en-1))\r\n    else                                           -- a string\r\n      en=string.find(txt,'\",',st+#str+1)\r\n      value=txt:sub(st+#str+1,en-1):gsub('\\\\\"','\"'):gsub('\\\\n','\\n'):gsub(\"\\\\u(%x%x%x%x)\",function (x) return string.char(tonumber(x,16)) end)\r\n    end\r\n  end\r\n  if type(value)=='string' then\r\n    value=value:gsub(',}','}')    -- get rid of the previously inserted comma\r\n  end\r\n  return value,en\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "36dc1f",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": -48.3455467,
            "posY": 1.58060884,
            "posZ": -9.320787,
            "rotX": -90.0,
            "rotY": 90.0,
            "rotZ": -1.35837169E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Mystery Booster",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "http://pastebin.com/raw/PqfGKtKR",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "function tryObjectEnter(obj)\r\n  if obj.type=='Card' or obj.type=='Deck' then\r\n    return true\r\n  else\r\n    return false\r\n  end\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, object)\r\n  if container~=self then return end\r\n  if container.getQuantity()==0 then\r\n    Wait.time(function()\r\n      if container~=nil then\r\n        container.destruct()\r\n      end\r\n    end,2)\r\n  end\r\nend\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    }
  ]
}